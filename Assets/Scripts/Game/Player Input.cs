//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""PlayerKeyBoardInput"",
            ""id"": ""22ef17de-b54c-4d41-9aa6-6048ce3ef178"",
            ""actions"": [
                {
                    ""name"": ""Mevement"",
                    ""type"": ""Value"",
                    ""id"": ""f69a128b-6f78-4bfd-a4e4-0e8c6196a640"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""sprint"",
                    ""type"": ""Button"",
                    ""id"": ""65b0e79d-a9e2-431d-bc8c-0e855015031d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b10ec7b0-b108-4984-bc9e-d0a504f56a87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""146ea0b8-e5c5-42d1-97b8-0c57d9dc7ac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""use"",
                    ""type"": ""Button"",
                    ""id"": ""627ee531-e3a9-44f7-992f-ec64a674cb86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""508e0497-14d7-4599-a0f9-fd6cb302cc0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""eb10c8ea-8754-4ba0-bea7-702d2f8d1ca1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2555a4a8-ad37-4f7e-976b-01eafe6a4d89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""072b41c8-2bcc-4bfe-8d77-6654ff08c3b8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6deb73b8-275f-4996-913c-bc9f0bf99a56"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e4a1891d-bd5b-43e4-aa2a-2e90d87657bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b44743dd-5d82-4556-a4bd-88af200f5177"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cdbe7fd1-2701-4b2e-a0b7-9ab02297f286"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrows"",
                    ""id"": ""1ba80d06-cfd7-452b-870c-31fe9eab9743"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""09e31ab2-ed3a-4920-8b98-75a6e7870b25"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""177df79c-9830-4ce3-8e7d-82172c3c6aee"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""68a513b1-0504-424e-9eaf-0b4a5493d0a1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""670c6caa-5897-4bff-a6a3-08b933d2a3cd"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mevement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f507da5d-9d05-4595-a822-e0803e9be8a5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""920357e5-f06b-4f41-acee-993d33164a78"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1c79352-f475-461a-acbb-5e2720740927"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""345688f0-d6f9-4aa4-8c6b-1ea604b765b9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""706e3ace-bd38-4b31-a717-32d27c3224e9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65aa4b62-e18c-45fc-a2b7-98c923576a7b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfed4d9b-0157-4cbb-90c6-9de294ea4307"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerKeyBoardInput
        m_PlayerKeyBoardInput = asset.FindActionMap("PlayerKeyBoardInput", throwIfNotFound: true);
        m_PlayerKeyBoardInput_Mevement = m_PlayerKeyBoardInput.FindAction("Mevement", throwIfNotFound: true);
        m_PlayerKeyBoardInput_sprint = m_PlayerKeyBoardInput.FindAction("sprint", throwIfNotFound: true);
        m_PlayerKeyBoardInput_Jump = m_PlayerKeyBoardInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerKeyBoardInput_fire = m_PlayerKeyBoardInput.FindAction("fire", throwIfNotFound: true);
        m_PlayerKeyBoardInput_use = m_PlayerKeyBoardInput.FindAction("use", throwIfNotFound: true);
        m_PlayerKeyBoardInput_crouch = m_PlayerKeyBoardInput.FindAction("crouch", throwIfNotFound: true);
        m_PlayerKeyBoardInput_Aim = m_PlayerKeyBoardInput.FindAction("Aim", throwIfNotFound: true);
        m_PlayerKeyBoardInput_Shoot = m_PlayerKeyBoardInput.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKeyBoardInput
    private readonly InputActionMap m_PlayerKeyBoardInput;
    private List<IPlayerKeyBoardInputActions> m_PlayerKeyBoardInputActionsCallbackInterfaces = new List<IPlayerKeyBoardInputActions>();
    private readonly InputAction m_PlayerKeyBoardInput_Mevement;
    private readonly InputAction m_PlayerKeyBoardInput_sprint;
    private readonly InputAction m_PlayerKeyBoardInput_Jump;
    private readonly InputAction m_PlayerKeyBoardInput_fire;
    private readonly InputAction m_PlayerKeyBoardInput_use;
    private readonly InputAction m_PlayerKeyBoardInput_crouch;
    private readonly InputAction m_PlayerKeyBoardInput_Aim;
    private readonly InputAction m_PlayerKeyBoardInput_Shoot;
    public struct PlayerKeyBoardInputActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerKeyBoardInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mevement => m_Wrapper.m_PlayerKeyBoardInput_Mevement;
        public InputAction @sprint => m_Wrapper.m_PlayerKeyBoardInput_sprint;
        public InputAction @Jump => m_Wrapper.m_PlayerKeyBoardInput_Jump;
        public InputAction @fire => m_Wrapper.m_PlayerKeyBoardInput_fire;
        public InputAction @use => m_Wrapper.m_PlayerKeyBoardInput_use;
        public InputAction @crouch => m_Wrapper.m_PlayerKeyBoardInput_crouch;
        public InputAction @Aim => m_Wrapper.m_PlayerKeyBoardInput_Aim;
        public InputAction @Shoot => m_Wrapper.m_PlayerKeyBoardInput_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKeyBoardInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKeyBoardInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerKeyBoardInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerKeyBoardInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerKeyBoardInputActionsCallbackInterfaces.Add(instance);
            @Mevement.started += instance.OnMevement;
            @Mevement.performed += instance.OnMevement;
            @Mevement.canceled += instance.OnMevement;
            @sprint.started += instance.OnSprint;
            @sprint.performed += instance.OnSprint;
            @sprint.canceled += instance.OnSprint;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @fire.started += instance.OnFire;
            @fire.performed += instance.OnFire;
            @fire.canceled += instance.OnFire;
            @use.started += instance.OnUse;
            @use.performed += instance.OnUse;
            @use.canceled += instance.OnUse;
            @crouch.started += instance.OnCrouch;
            @crouch.performed += instance.OnCrouch;
            @crouch.canceled += instance.OnCrouch;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayerKeyBoardInputActions instance)
        {
            @Mevement.started -= instance.OnMevement;
            @Mevement.performed -= instance.OnMevement;
            @Mevement.canceled -= instance.OnMevement;
            @sprint.started -= instance.OnSprint;
            @sprint.performed -= instance.OnSprint;
            @sprint.canceled -= instance.OnSprint;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @fire.started -= instance.OnFire;
            @fire.performed -= instance.OnFire;
            @fire.canceled -= instance.OnFire;
            @use.started -= instance.OnUse;
            @use.performed -= instance.OnUse;
            @use.canceled -= instance.OnUse;
            @crouch.started -= instance.OnCrouch;
            @crouch.performed -= instance.OnCrouch;
            @crouch.canceled -= instance.OnCrouch;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayerKeyBoardInputActions instance)
        {
            if (m_Wrapper.m_PlayerKeyBoardInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerKeyBoardInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerKeyBoardInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerKeyBoardInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerKeyBoardInputActions @PlayerKeyBoardInput => new PlayerKeyBoardInputActions(this);
    public interface IPlayerKeyBoardInputActions
    {
        void OnMevement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
